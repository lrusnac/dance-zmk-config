/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_36keys.h"

#define DEFAULT 0
#define NUM 1
#define NAV 2
#define FUN 3

#define QUICK_TAP_MS 175
#define REQUIRE_PRIOR_IDLE_MS 10500/50 // set it to at least 10500/x where x is your (relaxed) WPM for English prose
#define TAPING_TERM_MS 280
// #define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//     ZMK_HOLD_TAP(NAME, \
//         flavor = "balanced"; \
//         tapping-term-ms = <280>; \
//         quick-tap-ms = <QUICK_TAP_MS>; \
//         require-prior-idle-ms = <150>; \
//         bindings = <HOLD>, <TAP>; \
//         hold-trigger-key-positions = <TRIGGER_POS>; \
//         hold-trigger-on-release; \
//     )
// MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
// MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
// MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

/ {

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;

            bindings = <&kp>, <&key_repeat>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        // hml_lpar_lt: hml_lpar_lt {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;

        //     bindings = <&kp>, <&lpar_lt>;

        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };
        // hml_rpar_gt: hml_rpar_gt {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;

        //     bindings = <&kp>, <&rpar_gt>;

        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };


        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q             &kp W  &kp E  &kp R        &kp T               &kp Y      &kp U      &kp I      &kp O    &kp P
  &hml LGUI A      &hml LALT S  &hml LSHFT D  &hml LCTRL F        &kp G  &kp H    &hmr RCTRL   J   &hmr RSHFT    K     &hmr RALT  L    &hmr RGUI SEMI
  &mt LEFT_SHIFT Z  &kp X  &kp C  &kp V        &kp B               &kp N      &kp M      &kp COMMA  &kp DOT  &kp FSLH
                           &mo 1  &super_bspc  &kp LEFT_COMMAND    &kp LSHFT  &kp SPACE  &mo 2
            >;
        };

        num_layer {
            bindings = <
  &kp TILDE    &kp AT    &kp LBRC  &kp RBRC  &kp PRCNT    &kp STAR    &kp N7  &kp N8  &kp N9  &kp MINUS
  &hml LGUI CARET    &hml LALT HASH  &hml LSHFT LPAR  &hml LCTRL RPAR  &kp DLLR     &kp UNDER   &hmr RCTRL N4  &hmr RSHFT N5 &hmr RALT N6  &hmr RGUI PLUS
  &amps_morph  &kp LT    &kp LBKT  &kp RBKT  &kp GT       &slh_morph  &kp N1  &kp N2  &kp N3  &kp EQUAL
                         &trans    &trans    &trans       &trans      &kp N0  &trans
            >;
        };

        nav_layer {
            bindings = <
  &trans     &trans     &trans    &trans    &trans     &trans    &kp HOME  &kp END  &kp TAB    &super_bspc
  &sk LGUI  &sk LALT LCTRL  &sk LSHFT  &sk LCTRL  &kp TAB    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &kp SINGLE_QUOTE
  &trans     &kp DEL    &trans    &trans    &trans     &kp ESC   &kp RET   &trans   &kp GRAVE  &qmrk_excl
                        &trans    &trans    &trans     &trans    &trans    &trans
            >;
        };

        fun_layer {
            bindings = <
  &trans        &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_TOG    &trans       &kp F7  &kp F8  &kp F9  &kp F12
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans       &kp F4  &kp F5  &kp F6  &kp F11
  &bt BT_CLR    &kp C_PREV    &kp C_PP      &kp C_NEXT    &bootloader     &bootloader  &kp F1  &kp F2  &kp F3  &kp F10
                              &trans        &trans        &trans          &trans       &trans  &trans
            >;
        };
    };
};
